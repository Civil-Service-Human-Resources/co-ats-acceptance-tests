package uk.gov.co.test.ui.pages.v9.pecform

import org.scalatest.concurrent.Eventually.eventually
import uk.gov.co.test.ui.data.MasterVacancyDetails.{vXCrcCheckProvider, vXCrcLevel}
import uk.gov.co.test.ui.data.v9.pecform.PecFormDetails
import uk.gov.co.test.ui.pages.v9.CivilServiceJobsBasePage
import uk.gov.co.test.ui.pages.v9.pecform.YourDetailsPage.pecFormId

case class DeclarationDetails(
  acceptLongFormTAndCs: Boolean,
  acceptDbsTermsOne: Boolean,
  acceptDbsTermsTwo: Boolean,
  acceptDbsTermsThree: Boolean
)

object DeclarationPage extends CivilServiceJobsBasePage {

  private lazy val declarationTitle   = "Declaration - Civil Service Jobs - GOV.UK"
  def declarationTermsAndConditionsId = s"${pecFormId}_datafield_22499_1_1_804_label"
  def dbsTermsOneTextId               = s"${pecFormId}_field_que_72275_1"
  def dbsTermsOneId                   = s"${pecFormId}_datafield_72275_1_1_15120_label"
  def dbsTermsTwoTextId               = s"${pecFormId}_field_que_89002_1"
  def dbsTermsTwoId                   = s"${pecFormId}_datafield_89002_1_1_15120_label"
  def dbsTermsThreeTextId             = s"${pecFormId}_field_que_89006_1"
  def dbsTermsThreeId                 = s"${pecFormId}_datafield_89006_1_1_15120_label"
  def generalPecTAndCsTextId          = s"${pecFormId}_label_201059_1"
  def pecDeclarationTAndCsId          = s"${pecFormId}_datafield_205986_1_1_804_label"
  val pecFormSubmission               = "submit_button"

  private def declarationPageCheck(): Unit =
    eventually(onPage(declarationTitle))

  private def acceptDbsTerms(declarationDetails: DeclarationDetails): Unit =
    if (vXCrcLevel != "None" && vXCrcCheckProvider.contains("DBS")) {
      waitForVisibilityOfElementById(
        dbsTermsOneTextId
      ).getText shouldEqual "I consent to the DBS providing an electronic result directly to the responsible organisation that has submitted my application. I understand that an electronic result contains a message that indicates either the certificate does not contain criminal record information or to await certificate which will indicate that my certificate contains criminal record information."
      waitForVisibilityOfElementById(
        dbsTermsTwoTextId
      ).getText shouldEqual "I have read the DBS Check Processing Privacy Policy (opens in a new window) and I understand how DBS will process my personal data"
      waitForVisibilityOfElementById(
        dbsTermsThreeTextId
      ).getText shouldEqual "I have provided complete and true information in support of the application and I understand that knowingly making a false statement for this purpose is a criminal offence."
      if (declarationDetails.acceptDbsTermsOne) radioSelect(dbsTermsOneId)
      if (declarationDetails.acceptDbsTermsTwo) radioSelect(dbsTermsTwoId)
      if (declarationDetails.acceptDbsTermsThree) radioSelect(dbsTermsThreeId)
    }

  private def acceptDeclarationTermsAndConditions(declarationDetails: DeclarationDetails): Unit =
    if (declarationDetails.acceptLongFormTAndCs) {
      waitForVisibilityOfElementById(
        generalPecTAndCsTextId
      ).getText shouldEqual "All the information I’ve given in my application form is true to the best of my knowledge and belief and relates to my own experiences\nThis is my only application for this role and accurately reflects my suitability\nI understand a check against the National Collection of Criminal Records and against other records or databases may be undertaken if I'm offered a post\nI understand the recruiting organisation may contact HM Revenue & Customs (HMRC) to validate the employment history information I’ve given in my application form using their Pay As You Earn (PAYE) database\nI understand that I’ll be asked for evidence of identification if I’m offered a post\nI understand references may be called at the appropriate part of the recruitment process\nI understand that my application may be rejected if I’ve given false information or withheld relevant details\nI understand that if evidence of plagiarism is found in my application it may be rejected. Examples of plagiarism can include presenting the ideas and experience of others, or generated by artificial intelligence, as your own.\nIf you have any concerns about what we will do with your information, please see our privacy notice (opens in a new window)."
      clickOn(pecDeclarationTAndCsId)
    } else throw new IllegalStateException("You must accept pec form terms and condition to proceed!")

  private val declaration: Seq[DeclarationDetails => Unit] = Seq(
    acceptDbsTerms,
    acceptDeclarationTermsAndConditions
  )

  def declarationPage(pecFormDetails: PecFormDetails): Unit = {
    declarationPageCheck()
    declaration.foreach { f =>
      f(pecFormDetails.declarationDetails)
    }
  }
}
